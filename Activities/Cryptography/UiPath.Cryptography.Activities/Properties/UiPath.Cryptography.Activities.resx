<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlgorithmDisplayName" xml:space="preserve">
    <value>Algorithm</value>
    <comment>property name</comment>
  </data>
  <data name="EncodingDisplayName" xml:space="preserve">
    <value>Encoding</value>
    <comment>property name</comment>
  </data>
  <data name="EncodingDescription" xml:space="preserve">
    <value>The encoding used to interpret the input string.</value>
  </data>
  <data name="EncryptAlgorithmDescription" xml:space="preserve">
    <value>The encryption algorithm that will be used by this activity.</value>
  </data>
  <data name="EncryptTextEncodingDescription" xml:space="preserve">
    <value>The encoding used to interpret the input string and key.</value>
  </data>
  <data name="EncryptTextDisplayName" xml:space="preserve">
    <value>Encrypt Text</value>
    <comment>activity name</comment>
  </data>
  <data name="EncryptTextDescription" xml:space="preserve">
    <value>Encrypts the input string using the selected algorithm and the provided key and returns the base64 string representation of the encrypted result.</value>
  </data>
  <data name="EncryptTextInputDescription" xml:space="preserve">
    <value>The string that will be encrypted by this activity.</value>
  </data>
  <data name="EncryptTextKeyDescription" xml:space="preserve">
    <value>The key used to encrypt the input string.</value>
  </data>
  <data name="EncryptTextResultDescription" xml:space="preserve">
    <value>The base64 string representation of the encrypted input string.</value>
  </data>
  <data name="FipsComplianceWarning" xml:space="preserve">
    <value>The selected algorithm does not have a FIPS compliant implementation. This might not work on some machines.</value>
  </data>
  <data name="HashAlgorithmDescription" xml:space="preserve">
    <value>The hashing algorithm that will be used by this activity.</value>
  </data>
  <data name="HashTextDisplayName" xml:space="preserve">
    <value>Hash Text</value>
    <comment>activity name</comment>
  </data>
  <data name="HashTextDescription" xml:space="preserve">
    <value>Applies the selected hashing algorithm on the input string and returns the hexadecimal string representation of the resulting hash.</value>
  </data>
  <data name="HashTextInputDescription" xml:space="preserve">
    <value>The string that will be hashed by this activity.</value>
  </data>
  <data name="HashTextResultDescription" xml:space="preserve">
    <value>The hexadecimal string representation of the hashed input string.</value>
  </data>
  <data name="Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="InputStringDisplayName" xml:space="preserve">
    <value>Text</value>
    <comment>property name</comment>
  </data>
  <data name="KeyDisplayName" xml:space="preserve">
    <value>Key</value>
    <comment>property name</comment>
  </data>
  <data name="KeyedHashAlgorithmDescription" xml:space="preserve">
    <value>The keyed hashing algorithm that will be used by this activity.</value>
  </data>
  <data name="KeyedHashEncodingDescription" xml:space="preserve">
    <value>The encoding used to interpret the input string and key.</value>
  </data>
  <data name="KeyedHashTextKeyDescription" xml:space="preserve">
    <value>The key used to hash the input string.</value>
  </data>
  <data name="KeyedHashTextDisplayName" xml:space="preserve">
    <value>Hash Text With Key</value>
    <comment>activity name</comment>
  </data>
  <data name="KeyedHashTextDescription" xml:space="preserve">
    <value>Applies the selected hashing algorithm on the input string, using the provided key for hashing and returns the hexadecimal string representation of the resulting hash.</value>
  </data>
  <data name="OutputDisplayName" xml:space="preserve">
    <value>Output</value>
    <comment>property name</comment>
  </data>
  <data name="ResultDisplayName" xml:space="preserve">
    <value>Result</value>
    <comment>property name</comment>
  </data>
  <data name="DecryptAlgorithmDescription" xml:space="preserve">
    <value>The decryption algorithm that will be used by this activity.</value>
  </data>
  <data name="DecryptTextDisplayName" xml:space="preserve">
    <value>Decrypt Text</value>
    <comment>activity name</comment>
  </data>
  <data name="DecryptTextDescription" xml:space="preserve">
    <value>Decrypts the input string using the selected algorithm and the provided key and returns the original, unecrypted string.</value>
  </data>
  <data name="DecryptTextEncodingDescription" xml:space="preserve">
    <value>The encoding used to interpret the input string and key.</value>
  </data>
  <data name="DecryptTextInputDescription" xml:space="preserve">
    <value>The string that will be decrypted by this activity.</value>
  </data>
  <data name="DecryptTextKeyDescription" xml:space="preserve">
    <value>The key used to decrypt the input string.</value>
  </data>
  <data name="DecryptTextResultDescription" xml:space="preserve">
    <value>The decrypted string.</value>
  </data>
  <data name="FileDoesNotExistsException" xml:space="preserve">
    <value>The file does not exist.</value>
  </data>
  <data name="FilePathDisplayName" xml:space="preserve">
    <value>FilePath</value>
    <comment>property name</comment>
  </data>
  <data name="HashFileDisplayName" xml:space="preserve">
    <value>Hash File</value>
    <comment>activity name</comment>
  </data>
  <data name="HashFileDescription" xml:space="preserve">
    <value>Applies the selected hashing algorithm on the contents of the provided file and returns the hexadecimal string representation of the resulting hash.</value>
  </data>
  <data name="HashFilePathDescription" xml:space="preserve">
    <value>Path to the file that will be hashed by this activity.</value>
  </data>
  <data name="HashFileResultDescription" xml:space="preserve">
    <value>The hexadecimal string representation of the hashed file.</value>
  </data>
  <data name="KeyedHashFileDisplayName" xml:space="preserve">
    <value>Hash File With Key</value>
    <comment>activity name</comment>
  </data>
  <data name="KeyedHashFileDescription" xml:space="preserve">
    <value>Applies the selected hashing algorithm on the input file, using the provided key for hashing and returns the hexadecimal string representation of the resulting hash.</value>
  </data>
  <data name="KeyedHashFileKeyDescription" xml:space="preserve">
    <value>The key used to hash the provided file.</value>
  </data>
  <data name="KeyedHashFileResultDescription" xml:space="preserve">
    <value>The hexadecimal string representation of the hashed file.</value>
  </data>
  <data name="KeyedHashFileEncodingDescription" xml:space="preserve">
    <value>The encoding used to interpret the key.</value>
  </data>
  <data name="EncryptFileDisplayName" xml:space="preserve">
    <value>Encrypt File</value>
    <comment>activity name</comment>
  </data>
  <data name="EncryptFileDescription" xml:space="preserve">
    <value>Encrypts the input file using the selected algorithm and the provided key and saves the result in the output file.</value>
  </data>
  <data name="EncryptFileEncodingDescription" xml:space="preserve">
    <value>The encoding used to interpret the key.</value>
  </data>
  <data name="EncryptFileInputPathDescription" xml:space="preserve">
    <value>Path to the file that will be encrypted by this activity.</value>
  </data>
  <data name="EncryptFileKeyDescription" xml:space="preserve">
    <value>The key used to encrypt the input file.</value>
  </data>
  <data name="EncryptFileOutputPathDescription" xml:space="preserve">
    <value>The path where the encrypted file will be saved.</value>
  </data>
  <data name="InputFilePathDisplayName" xml:space="preserve">
    <value>InputPath</value>
    <comment>property name</comment>
  </data>
  <data name="OutputFilePathDisplayName" xml:space="preserve">
    <value>OutputPath</value>
    <comment>property name</comment>
  </data>
  <data name="OverwriteDisplayName" xml:space="preserve">
    <value>Overwrite</value>
    <comment>property name</comment>
  </data>
  <data name="OverwriteDescription" xml:space="preserve">
    <value>Overwrite the output file if it already exists.</value>
  </data>
  <data name="FileAlreadyExistsException" xml:space="preserve">
    <value>The file already exists.</value>
  </data>
  <data name="DecryptFileDisplayName" xml:space="preserve">
    <value>Decrypt File</value>
    <comment>activity name</comment>
  </data>
  <data name="DecryptFileDescription" xml:space="preserve">
    <value>Decrypts the input file using the selected algorithm and the provided key and saves the original, unecrypted file.</value>
  </data>
  <data name="DecryptFileEncodingDescription" xml:space="preserve">
    <value>The encoding used to interpret the key.</value>
  </data>
  <data name="DecryptFileInputPathDescription" xml:space="preserve">
    <value>Path to the file that will be decrypted by this activity.</value>
  </data>
  <data name="DecryptFileKeyDescription" xml:space="preserve">
    <value>The key used to decrypt the input file.</value>
  </data>
  <data name="DecryptFileOutputPathDescription" xml:space="preserve">
    <value>The path where the decrypted file will be saved.</value>
  </data>
  <data name="GenericCryptographicException" xml:space="preserve">
    <value>A cryptographic operation has failed. Please make sure you use the same algorithm and key for both encryption and decryption operations.</value>
  </data>
  <data name="KeyEncodingDisplayName" xml:space="preserve">
    <value>KeyEncoding</value>
    <comment>property name</comment>
  </data>
  <data name="Encoding" xml:space="preserve">
    <value>Encoding</value>
  </data>
  <data name="Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="Common" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="ContinueOnErrorDisplayName" xml:space="preserve">
    <value>ContinueOnError</value>
    <comment>property name</comment>
  </data>
  <data name="MacTripleDesKeySizeWarning" xml:space="preserve">
    <value>MACTripleDES uses a key that is 16 or 24 bytes long. The length of your key depends on the Encoding.</value>
  </data>
</root>